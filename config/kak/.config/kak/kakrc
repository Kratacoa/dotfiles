# # # # # #
# PLUGINS #
# # # # # #

# Load plug.kak
source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

# LSP stuff; example taken from the wiki, by @dpc
plug "kak-lsp/kak-lsp" do %{
    cargo build --release --locked
    cargo install --force --path .
} config %{

    # uncomment to enable debugging
    # eval %sh{echo ${kak_opt_lsp_cmd} >> /tmp/kak-lsp.log}
    # set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

    # this is not necessary; the `lsp-enable-window` will take care of it
    # eval %sh{${kak_opt_lsp_cmd} --kakoune -s $kak_session}

    set global lsp_diagnostic_line_error_sign '║'
    set global lsp_diagnostic_line_warning_sign '┊'

    define-command ne -docstring 'go to next error/warning from lsp' %{ lsp-find-error --include-warnings }
    define-command pe -docstring 'go to previous error/warning from lsp' %{ lsp-find-error --previous --include-warnings }
    define-command ee -docstring 'go to current error/warning from lsp' %{ lsp-find-error --include-warnings; lsp-find-error --previous --include-warnings }

    define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }
    hook global WinSetOption filetype=(c|cpp|cc|rust|javascript|typescript) %{
        set-option window lsp_auto_highlight_references true
        set-option window lsp_hover_anchor false
        lsp-auto-hover-enable
        echo -debug "Enabling LSP for filtetype %opt{filetype}"
        lsp-enable-window
    }

    hook global WinSetOption filetype=(rust) %{
        set window lsp_server_configuration rust.clippy_preference="on"
    }

    hook global WinSetOption filetype=rust %{
        hook window BufWritePre .* %{
            evaluate-commands %sh{
                test -f rustfmt.toml && printf lsp-formatting-sync
            }
        }
    }

    hook global KakEnd .* lsp-exit
}

# smart indentation/parentheses
plug "eraserhd/parinfer-rust" do %{
        cargo install --force --path .
        cargo clean
} config %{
        hook global WinSetOption filetype=(clojure|lisp|scheme|racket) %{
                    parinfer-enable-window -smart
        }
}

# fzf integration
plug "andreyorst/fzf.kak"

# Don't remember what they do
# plug "alexherbo2/prelude.kak"
# plug "alexherbo2/connect.kak" do %{
#     make install
# }

# # # # # # #
# INTERFACE #
# # # # # # #

## Colorscheme
colorscheme solarized-light

# Assistant
set-option global ui_options ncurses_assistant=dilbert

## Tabstop and indentwidth
set-option global tabstop 4
set-option global indentwidth 4

## Always keep on display one line around the cursor
set-option global scrolloff 1,0

## Line numbers
add-highlighter global/ number-lines -relative -min-digits '3' -separator ' '

## Soft wrapping
add-highlighter global/ wrap -indent -word -width 80

# # # # # # #
# MAPPINGS #
# # # # # # #

## Plugins
### fzf.kak
map global normal <c-p> ': fzf-mode<ret>'
### kak-lsp
map global user l %{: enter-user-mode lsp<ret>} -docstring "LSP mode"

## Clipboard
map -docstring "yank the selection into clipboard" global user y "<a-|> xclip -i -sel clipboard<ret>"
map -docstring "paste from the clipboard" global user p "<a-!> xclip -o -sel clipboard<ret>"

# # # # #
# HOOKS #
# # # # #

# Make directory if not exisit
hook global BufWritePre .* %{ nop %sh{ dir=$(dirname $kak_buffile)
  [ -d $dir ] || mkdir --parents $dir
}}

# Load kak-lsp only for recognised languages
hook global WinSetOption filetype=(rust|python|go|javascript|typescript|c|cpp) %{
    lsp-enable-window
}

# Recognise Racket file extensions as Lisp
hook global BufCreate (.*/)?(.*\.(rkt|rktl|rkts|rktd)) %{
	set-option buffer filetype lisp
}

# # # # #
# LOGS #
# # # # #

declare-option -hidden str log_dir %sh{ echo "$HOME/repository/personal/diary" }

## Diary Entries

define-command diary-new %{ edit %sh{ printf "%s" "$kak_opt_log_dir/$(date +%F).md" } }
define-command diary-previous %{ edit %sh{ printf "%s" "$(find $kak_opt_log_dir -maxdepth 1 -type f | sed -n 'x;$p')" } }	# this sed magic was picked up from https://stackoverflow.com/a/7671768; don't really understand it :/

## Gymnastics Log
define-command gymnastics-new %{
    nop %sh{ test -e "$kak_opt_log_dir/gymnastics/$(date +%F).md" ||
    cat "$kak_opt_log_dir/gymnastics/TEMPLATE" > "$kak_opt_log_dir/gymnastics/$(date +%F).md" }
    edit %sh{ printf "%s" "$kak_opt_log_dir/gymnastics/$(date +%F).md" }
	execute-keys -save-regs '' /\$REPS<ret>
}

## Flexibility Log
define-command flexibility-new %{
    nop %sh{ test -e "$kak_opt_log_dir/flexibility/$(date +%F).md" ||
    cat "$kak_opt_log_dir/flexibility/TEMPLATE" > "$kak_opt_log_dir/flexibility/$(date +%F).md" }
    edit %sh{ printf "%s" "$kak_opt_log_dir/flexibility/$(date +%F).md" }
}

## Meditation Log
define-command meditation-new %{
	nop %sh{ test -e "$kak_opt_log_dir/meditation/$(date +%F).md" ||
	cat "$kak_opt_log_dir/meditation/TEMPLATE" > "$kak_opt_log_dir/meditation/$(date +%F).md" }
    edit %sh{ printf "%s" "$kak_opt_log_dir/meditation/$(date +%F).md" }
    execute-keys -save-regs '' /\$VALUE<ret>
}

## Studying Log
define-command studying-new %{
	nop %sh{ test -e "$kak_opt_log_dir/studying/$(date +%F).md" ||
	cat "$kak_opt_log_dir/studying/TEMPLATE" > "$kak_opt_log_dir/studying/$(date +%F).md" }
	edit %sh{ printf "%s" "$kak_opt_log_dir/studying/$(date +%F).md" }
	execute-keys -save-regs '' /\$VALUE<ret>
}
define-command studying-previous %{ edit %sh{ printf "%s" "$(find $kak_opt_log_dir/studying/ -maxdepth 1 -type f | sed -n 'x;$p')" } }	# this sed magic was picked up from https://stackoverflow.com/a/7671768; don't really understand it :/
